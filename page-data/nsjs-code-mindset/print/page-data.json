{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/nsjs-code-mindset/print","result":{"data":{"deck":{"id":"72f59a9d-0edf-54d1-a35c-982623d517cd","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Code Mindset\"), mdx(\"p\", null, \"Nenad Per\\u010Di\\u0107 \\uD83D\\uDC4B\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Rule { #1 }\"), mdx(\"p\", null, \"Stop using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"if-else\")), \" construct\"), mdx(\"hr\", null), mdx(\"h1\", null, \"What?!\"), mdx(\"p\", null, \"\\uD83E\\uDD2F\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    let closestEnemy;\\n\\n    if(enemy1.distance < enemy2.distance) {\\n        closestEnemy = enemy1;\\n    } else {\\n        closestEnemy = enemy2;\\n    }\\n\\n    return closestEnemy;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"Remove redundant variable\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Remove\",\n    \"redundant\": true,\n    \"variable\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    if(enemy1.distance < enemy2.distance) {\\n        return enemy1;\\n    } else {\\n        return enemy2;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"Get rid of the else first\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Get\",\n    \"rid\": true,\n    \"of\": true,\n    \"the\": true,\n    \"else\": true,\n    \"first\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    if(enemy1.distance < enemy2.distance) {\\n        return enemy1;\\n    }\\n    return enemy2;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"Replace if with ternary operator to make sure that it's gone\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Replace\",\n    \"if\": true,\n    \"with\": true,\n    \"ternary\": true,\n    \"operator\": true,\n    \"to\": true,\n    \"make\": true,\n    \"sure\": true,\n    \"that\": true,\n    \"it's\": true,\n    \"gone\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    return enemy1.distance < enemy2.distance\\n        ? enemy1\\n        : enemy2;\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Before\\\"\",\n    \"title\": \"\\\"Before\\\"\"\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    let closestEnemy;\\n\\n    if(enemy1.distance < enemy2.distance) {\\n        closestEnemy = enemy1;\\n    } else {\\n        closestEnemy = enemy2;\\n    }\\n\\n    return closestEnemy;\\n}\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"After\\\"\",\n    \"title\": \"\\\"After\\\"\"\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    return enemy1.distance < enemy2.distance\\n        ? enemy1\\n        : enemy2;\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Rule { #2 }\"), mdx(\"p\", null, \"Use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Array prototype functions\")), \" instead of loops\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Okay...\"), mdx(\"p\", null, \"\\uD83E\\uDD14\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    let airplanes = [];\\n\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return;\\n    }\\n\\n    for(let i = 0; i < vehicles.length; i++) {\\n        if (vehicles[i].type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicles[i])\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"Use always return the same type\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Use\",\n    \"always\": true,\n    \"return\": true,\n    \"the\": true,\n    \"same\": true,\n    \"type\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    let airplanes = [];\\n\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return [];\\n    }\\n\\n    for(let i = 0; i < vehicles.length; i++) {\\n        if (vehicles[i].type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicles[i])\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"Give inputs default values you can work with\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Give\",\n    \"inputs\": true,\n    \"default\": true,\n    \"values\": true,\n    \"you\": true,\n    \"can\": true,\n    \"work\": true,\n    \"with\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles = []) {\\n    let airplanes = [];\\n\\n    for(let i = 0; i < vehicles.length; i++) {\\n        if (vehicles[i].type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicles[i])\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"Get rid of the nasty indexes\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Get\",\n    \"rid\": true,\n    \"of\": true,\n    \"the\": true,\n    \"nasty\": true,\n    \"indexes\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles = []) {\\n    let airplanes = [];\\n\\n    for(const vehicle of vehicles) {\\n        if (vehicle.type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicle)\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"Use Array.filter instead\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Use\",\n    \"Array.filter\": true,\n    \"instead\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles = []) {\\n    return vehicles.filter(vehicle => vehicle.type === \\u2708\\uFE0F);\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Before\\\"\",\n    \"title\": \"\\\"Before\\\"\"\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    let airplanes = [];\\n\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return;\\n    }\\n\\n    for(let i = 0; i < vehicles.length; i++) {\\n        if (vehicles[i].type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicles[i])\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"After\\\"\",\n    \"title\": \"\\\"After\\\"\"\n  }), \"function getAirplanesFromVehicles(vehicles = []) {\\n    return vehicles.filter(vehicle => vehicle.type === \\u2708\\uFE0F);\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Rule { #3 }\"), mdx(\"p\", null, \"Always pass down all needed ingedients to a function\"), mdx(\"hr\", null), mdx(\"h1\", null, \"This is not a kitchen...\"), mdx(\"p\", null, \"Nenade \\uD83D\\uDE11\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Your application\\\"\",\n    \"title\": \"\\\"Your\",\n    \"application\\\"\": true\n  }), \"var ingredients = [\\uD83E\\uDD66, \\uD83E\\uDD54, \\uD83E\\uDD69, \\uD83C\\uDF3D];\\n\\ndoSomething();\\n\\nconsole.log(cookedIngredients);\\n// Will this even log something?\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Your allmighty function\\\"\",\n    \"title\": \"\\\"Your\",\n    \"allmighty\": true,\n    \"function\\\"\": true\n  }), \"async function doSomething() {\\n    var cookedIngredients = [];\\n    for(let item of ingredients) {\\n        if (item !== \\uD83E\\uDD66) { // Nobody likes \\uD83E\\uDD66\\n            let cookedItem = await cook(item, \\uD83E\\uDDC2);\\n            cookedIngredients.push(cookedItem);\\n        }\\n    }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Your application\\\" subtitle=\\\"is responsible for sending proper data to a function\\\"\",\n    \"title\": \"\\\"Your\",\n    \"application\\\"\": true,\n    \"subtitle\": \"\\\"is\",\n    \"responsible\": true,\n    \"for\": true,\n    \"sending\": true,\n    \"proper\": true,\n    \"data\": true,\n    \"to\": true,\n    \"a\": true,\n    \"function\\\"\": true\n  }), \"const ingredients = [\\uD83E\\uDD66, \\uD83E\\uDD54, \\uD83E\\uDD69, \\uD83C\\uDF3D];\\n\\nconst cookedIngredients = \\n    await cookWithSeasoning(ingredients.filter(item => item !== \\uD83E\\uDD66), \\uD83E\\uDDC2);\\n\\nconsole.log(cookedIngredients);\\n// This now logs [\\uD83C\\uDF5F, \\uD83C\\uDF54, \\uD83C\\uDF7F]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Your function should always have a proper name\\\" subtitle=\\\"and return something, otherwise you don't need it!\\\"\",\n    \"title\": \"\\\"Your\",\n    \"function\": true,\n    \"should\": true,\n    \"always\": true,\n    \"have\": true,\n    \"a\": true,\n    \"proper\": true,\n    \"name\\\"\": true,\n    \"subtitle\": \"\\\"and\",\n    \"return\": true,\n    \"something,\": true,\n    \"otherwise\": true,\n    \"you\": true,\n    \"don't\": true,\n    \"need\": true,\n    \"it!\\\"\": true\n  }), \"\\nasync function cookWithSeasoning(items = [], season) {\\n    return Promise.all(\\n        items.map(async item => await cook(item, season))\\n    );\\n}\\n\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Thank you!\"), mdx(\"p\", null, \"\\uD83D\\uDE4F\\uD83C\\uDFFC\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"72f59a9d-0edf-54d1-a35c-982623d517cd","slug":"/nsjs-code-mindset","title":"Code Mindset"}}}