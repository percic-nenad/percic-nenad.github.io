{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/ght-code-mindset","matchPath":"/ght-code-mindset/*","result":{"data":{"deck":{"id":"6eb19d30-b9db-5c9f-b435-8312ee0373c9","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = github;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Code Mindset\"), mdx(\"p\", null, \"Nenad Per\\u010Di\\u0107 \\uD83D\\uDC4B\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    let closestEnemy;\\n\\n    if(enemy1.distance < enemy2.distance) {\\n        closestEnemy = enemy1;\\n    } else {\\n        closestEnemy = enemy2;\\n    }\\n\\n    return closestEnemy;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,10 title=\\\"Clean this code\\\" subtitle=\\\"Remove redundant variable\\\"\",\n    \"2,10\": true,\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Remove\",\n    \"redundant\": true,\n    \"variable\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    let closestEnemy;\\n\\n    if(enemy1.distance < enemy2.distance) {\\n        closestEnemy = enemy1;\\n    } else {\\n        closestEnemy = enemy2;\\n    }\\n\\n    return closestEnemy;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    if(enemy1.distance < enemy2.distance) {\\n        return enemy1;\\n    } else {\\n        return enemy2;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"4,6 title=\\\"Clean this code\\\" subtitle=\\\"Get rid of the else\\\"\",\n    \"4,6\": true,\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Get\",\n    \"rid\": true,\n    \"of\": true,\n    \"the\": true,\n    \"else\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    if(enemy1.distance < enemy2.distance) {\\n        return enemy1;\\n    } else {\\n        return enemy2;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    if(enemy1.distance < enemy2.distance) {\\n        return enemy1;\\n    }\\n    return enemy2;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"3[8:15],5[4:11] title=\\\"Clean this code\\\" subtitle=\\\"Call return only once\\\"\",\n    \"3[8:15],5[4:11]\": true,\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Call\",\n    \"return\": true,\n    \"only\": true,\n    \"once\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    if(enemy1.distance < enemy2.distance) {\\n        return enemy1;\\n    }\\n    return enemy2;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\" subtitle=\\\"By replacing IF with ternary operator\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"By\",\n    \"replacing\": true,\n    \"IF\": true,\n    \"with\": true,\n    \"ternary\": true,\n    \"operator\\\"\": true\n  }), \"function closestEnemy(enemy1, enemy2) {\\n    return enemy1.distance < enemy2.distance\\n        ? enemy1\\n        : enemy2;\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Rule { #1 }\"), mdx(\"p\", null, \"Stop using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"if-else\")), \" construct\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Why?! \\uD83E\\uDD2F\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Why?! 🤯\\\" subtitle=\\\"Because...\\\"\",\n    \"title\": \"\\\"Why?!\",\n    \"🤯\\\"\": true,\n    \"subtitle\": \"\\\"Because...\\\"\"\n  }), \"function foo(bar) {\\n    if(bar) {\\n        // Branch #1\\n    } else {\\n        // Branch #2\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Why?! 🤯\\\" subtitle=\\\"It branches your logic...\\\"\",\n    \"title\": \"\\\"Why?!\",\n    \"🤯\\\"\": true,\n    \"subtitle\": \"\\\"It\",\n    \"branches\": true,\n    \"your\": true,\n    \"logic...\\\"\": true\n  }), \"function foo(bar, buzz) {\\n    if(bar) {\\n        if (buzz) {\\n            // Branch #1\\n        } else {\\n            // Branch #2\\n        }\\n    } else {\\n        if(buzz) {\\n            // Branch #3\\n        } else {\\n            // Branch #4\\n        }\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Why?! 🤯\\\" subtitle=\\\"exponentially 😭\\\"\",\n    \"title\": \"\\\"Why?!\",\n    \"🤯\\\"\": true,\n    \"subtitle\": \"\\\"exponentially\",\n    \"😭\\\"\": true\n  }), \"function foo(bar, buzz, pleaseNo) {\\n    if(bar) {\\n        if (buzz) {\\n            if (pleaseNo) {\\n                // Branch #1\\n            } else {\\n                // Branch #2\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #3\\n            } else {\\n                // Branch #4\\n            }\\n        }\\n    } else {\\n        if(buzz) {\\n             if (pleaseNo) {\\n                // Branch #5\\n            } else {\\n                // Branch #6\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #7\\n            } else {\\n                // Branch #8\\n            }\\n        }\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"What are our alternatives? \\uD83E\\uDD14\"), mdx(\"p\", null, \"I promise I'll use only \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"if\")), \" without the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"else\")), \" part... \\uD83D\\uDE44\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Alternatives 🤔\\\"\",\n    \"title\": \"\\\"Alternatives\",\n    \"🤔\\\"\": true\n  }), \"function foo(bar) {\\n    return bar.buzz;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Alternatives 🤔\\\" subtitle=\\\"Guard statements are ok\\\"\",\n    \"title\": \"\\\"Alternatives\",\n    \"🤔\\\"\": true,\n    \"subtitle\": \"\\\"Guard\",\n    \"statements\": true,\n    \"are\": true,\n    \"ok\\\"\": true\n  }), \"function foo(bar) {\\n\\n    if (!bar) \\n        throw new BadArgumentException();\\n\\n    return bar.buzz;\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: (vsDark, github),\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Replacing if-else construct\\\"\",\n    \"title\": \"\\\"Replacing\",\n    \"if-else\": true,\n    \"construct\\\"\": true\n  }), \"function foo(bar, buzz, pleaseNo) {\\n    if(bar) {\\n        if (buzz) {\\n            if (pleaseNo) {\\n                // Branch #1\\n            } else {\\n                // Branch #2\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #3\\n            } else {\\n                // Branch #4\\n            }\\n        }\\n    } else {\\n        if(buzz) {\\n             if (pleaseNo) {\\n                // Branch #5\\n            } else {\\n                // Branch #6\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #7\\n            } else {\\n                // Branch #8\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"With switch\\\"\",\n    \"title\": \"\\\"With\",\n    \"switch\\\"\": true\n  }), \"function foo(bar, buzz, pleaseNo) {\\n    if(bar) {\\n        if (buzz) {\\n            if (pleaseNo) {\\n                // Branch #1\\n            } else {\\n                // Branch #2\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #3\\n            } else {\\n                // Branch #4\\n            }\\n        }\\n    } else {\\n        if(buzz) {\\n             if (pleaseNo) {\\n                // Branch #5\\n            } else {\\n                // Branch #6\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #7\\n            } else {\\n                // Branch #8\\n            }\\n        }\\n    }\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Using if-else construct\\\"\",\n    \"title\": \"\\\"Using\",\n    \"if-else\": true,\n    \"construct\\\"\": true\n  }), \"function foo(bar, buzz, pleaseNo) {\\n    if(bar) {\\n        if (buzz) {\\n            if (pleaseNo) {\\n                // Branch #1\\n            } else {\\n                // Branch #2\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #3\\n            } else {\\n                // Branch #4\\n            }\\n        }\\n    } else {\\n        if(buzz) {\\n             if (pleaseNo) {\\n                // Branch #5\\n            } else {\\n                // Branch #6\\n            }\\n        } else {\\n             if (pleaseNo) {\\n                // Branch #7\\n            } else {\\n                // Branch #8\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Using switch\\\" subtitle=\\\"Handle only real use cases\\\"\",\n    \"title\": \"\\\"Using\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"Handle\",\n    \"only\": true,\n    \"real\": true,\n    \"use\": true,\n    \"cases\\\"\": true\n  }), \"function foo(bar, buzz, pleaseNo) {\\n    switch(true) {\\n        case bar && buzz && pleaseNo:\\n            // Use case #1\\n            break;\\n        case buzz || pleaseNo:\\n            // Use case #2\\n            break;\\n        default:\\n            // Default behavior\\n    }\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Rule { #2 }\"), mdx(\"p\", null, \"Don't go inside of the arrays\"), mdx(\"hr\", null), mdx(\"h1\", null, \"How do you mean \\\"\", mdx(\"em\", {\n    parentName: \"h1\"\n  }, \"go inside\"), \"\\\"?!\"), mdx(\"p\", null, \"\\uD83E\\uDD14\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    let airplanes = [];\\n\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return airplanes;\\n    }\\n\\n    for(let i = 0; i < vehicles.length; i++) {\\n        if (vehicles[i].type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicles[i])\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8[9:44],9[12:23],10[27:38] title=\\\"Clean this code\\\" subtitle=\\\"Why are we thinking in indexes?\\\"\",\n    \"8[9:44],9[12:23],10[27:38]\": true,\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Why\",\n    \"are\": true,\n    \"we\": true,\n    \"thinking\": true,\n    \"in\": true,\n    \"indexes?\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    let airplanes = [];\\n\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return airplanes;\\n    }\\n\\n    for(let i = 0; i < vehicles.length; i++) {\\n        if (vehicles[i].type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicles[i])\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    let airplanes = [];\\n\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return airplanes;\\n    }\\n\\n    for(const vehicle of vehicles) {\\n        if (vehicle.type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicle)\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,5[15:24],10[12:21],14[11:20] title=\\\"Clean this code\\\" subtitle=\\\"Can we transform input array directly?\\\"\",\n    \"2,5[15:24],10[12:21],14[11:20]\": true,\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Can\",\n    \"we\": true,\n    \"transform\": true,\n    \"input\": true,\n    \"array\": true,\n    \"directly?\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    let airplanes = [];\\n\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return airplanes;\\n    }\\n\\n    for(const vehicle of vehicles) {\\n        if (vehicle.type === \\u2708\\uFE0F) {\\n            airplanes.push(vehicle)\\n        }\\n    }\\n\\n    return airplanes;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return [];\\n    }\\n\\n    return vehicles.filter(vehicle => vehicle.type === \\u2708\\uFE0F);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2:4 title=\\\"Clean this code\\\" subtitle=\\\"Can we do it without guard statement? 🤔\\\"\",\n    \"2:4\": true,\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true,\n    \"subtitle\": \"\\\"Can\",\n    \"we\": true,\n    \"do\": true,\n    \"it\": true,\n    \"without\": true,\n    \"guard\": true,\n    \"statement?\": true,\n    \"🤔\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles) {\\n    if(vehicles === undefined || vehicles === null || vehicles.length === 0) {\\n        return [];\\n    }\\n\\n    return vehicles.filter(vehicle => vehicle.type === \\u2708\\uFE0F);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Clean this code\\\"\",\n    \"title\": \"\\\"Clean\",\n    \"this\": true,\n    \"code\\\"\": true\n  }), \"function getAirplanesFromVehicles(vehicles = []) {\\n    return vehicles.filter(vehicle => vehicle.type === \\u2708\\uFE0F);\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Have you ever gone into a string?\"), mdx(\"p\", null, \"Strings are also arrays of characters\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Thank you!\"), mdx(\"p\", null, \"\\uD83D\\uDE4F\\uD83C\\uDFFC\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/ght-code-mindset/*","isCreatedByStatefulCreatePages":false,"id":"6eb19d30-b9db-5c9f-b435-8312ee0373c9","slug":"/ght-code-mindset","title":"Code Mindset"}}}